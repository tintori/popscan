tmp.oligo = ""
if(tmp.oligos$start[j]<60){tmp.oligo=tmp.oligos$iupacSequence[j]}
if(tmp.oligos$start[j]>140){tmp.oligo=tmp.oligos$iupacSequenceRc[j]}
if(tmp.oligo==""){return("Something went wrong")}
# blast it against genome
write(tmp.oligo, file = "tmpfile.txt")
# blastn -task blastn -query query.fa -db subject
myPipe <- pipe( "/usr/local/ncbi/blast/bin/blastn -task blastn -query ~/tmpfile.txt -db ~/blast/db/c_elegans_db -outfmt 6 -max_target_seqs 10")
results <- read.table( myPipe )
colnames( results ) <- c( "QueryID",  "Chrom", "PercID",
"Len", "MM", "GO", "Qs", "Qe",
"Ss", "Se", "E", "Bits" )
results = results[c(1:2),c("Chrom", "PercID", "Len", "E", "MM", "GO", "Ss", "Se")]
results
primer.specificity[j,c("primer.start", "primer.end", "chrom.1", "percID.1", "Len.1", "E.1", "MM.1", "GO.1", "Ss.1", "Se.1", "chrom.2", "percID.2", "Len.2", "E.2", "MM.2", "GO.2", "Ss.2", "Se.2")] =
c(tmp.oligos$start[j], tmp.oligos$end[j], results[1,], results[2,])
}
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200) %>%
mutate(e.ratio = as.numeric(E.2)/as.numeric(E.1)) %>%
arrange(desc(e.ratio))
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200) %>%
mutate(e.ratio = as.numeric(E.2)/as.numeric(E.1)) %>%
arrange(desc(e.ratio))
i=465 # 41, 465, 534, 716
#i=i+1
tmp.prof = consensusProfile(x = DNAMultipleAlignment(indels$N100s[i]))
tmp.oligos = designOligos(x = tmp.prof, probe = FALSE) %>% as.data.frame() %>%
rownames_to_column("primer")
tmp.oligos %>%
mutate(tmMean = as.numeric(tmMean)) %>%
ggplot() +
geom_segment(aes(x=start, xend=end, y=tmMean))+
ggtitle(paste(biggish_indels$CHROM[i], biggish_indels$POS[i]))
tmp.oligos = tmp.oligos %>% filter(tmMean>54, tmMean<60) %>%
select(start, end, length, iupacSequence, iupacSequenceRc, gcContentMean, tmMean)
primer.specificity = data.frame()
for(j in 1:nrow(tmp.oligos)){
# get oligo sequence
tmp.oligo = ""
if(tmp.oligos$start[j]<60){tmp.oligo=tmp.oligos$iupacSequence[j]}
if(tmp.oligos$start[j]>140){tmp.oligo=tmp.oligos$iupacSequenceRc[j]}
if(tmp.oligo==""){return("Something went wrong")}
# blast it against genome
write(tmp.oligo, file = "tmpfile.txt")
# blastn -task blastn -query query.fa -db subject
myPipe <- pipe( "/usr/local/ncbi/blast/bin/blastn -task blastn -query ~/tmpfile.txt -db ~/blast/db/c_elegans_db -outfmt 6 -max_target_seqs 10")
results <- read.table( myPipe )
colnames( results ) <- c( "QueryID",  "Chrom", "PercID",
"Len", "MM", "GO", "Qs", "Qe",
"Ss", "Se", "E", "Bits" )
results = results[c(1:2),c("Chrom", "PercID", "Len", "E", "MM", "GO", "Ss", "Se")]
results
primer.specificity[j,c("primer.start", "primer.end", "chrom.1", "percID.1", "Len.1", "E.1", "MM.1", "GO.1", "Ss.1", "Se.1", "chrom.2", "percID.2", "Len.2", "E.2", "MM.2", "GO.2", "Ss.2", "Se.2")] =
c(tmp.oligos$start[j], tmp.oligos$end[j], results[1,], results[2,])
}
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200) %>%
mutate(e.ratio = as.numeric(E.2)/as.numeric(E.1)) %>%
arrange(desc(e.ratio))
primer.specificity = data.frame()
for(j in 1:nrow(tmp.oligos)){
# get oligo sequence
tmp.oligo = ""
if(tmp.oligos$start[j]<60){tmp.oligo=tmp.oligos$iupacSequence[j]}
if(tmp.oligos$start[j]>140){tmp.oligo=tmp.oligos$iupacSequenceRc[j]}
if(tmp.oligo==""){return("Something went wrong")}
# blast it against genome
write(tmp.oligo, file = "tmpfile.txt")
# blastn -task blastn -query query.fa -db subject
myPipe <- pipe( "/usr/local/ncbi/blast/bin/blastn -task blastn -query ~/tmpfile.txt -db ~/blast/db/c_elegans_db -outfmt 6 -max_target_seqs 10")
results <- read.table( myPipe )
colnames( results ) <- c( "QueryID",  "Chrom", "PercID",
"Len", "MM", "GO", "Qs", "Qe",
"Ss", "Se", "E", "Bits" )
results = results[c(1:2),c("Chrom", "PercID", "Len", "E", "MM", "GO", "Ss", "Se")]
results
primer.specificity[j,c("p.st", "p.end", "chrom.1", "percID.1", "Len.1", "E.1", "MM.1", "GO.1", "Ss.1", "Se.1", "chrom.2", "percID.2", "Len.2", "E.2", "MM.2", "GO.2", "Ss.2", "Se.2")] =
c(tmp.oligos$start[j], tmp.oligos$end[j], results[1,], results[2,])
}
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200) %>%
mutate(e.ratio = as.numeric(E.2)/as.numeric(E.1)) %>%
arrange(desc(e.ratio))
i=534 # 41, 465, 534, 716
#i=i+1
tmp.prof = consensusProfile(x = DNAMultipleAlignment(indels$N100s[i]))
tmp.oligos = designOligos(x = tmp.prof, probe = FALSE) %>% as.data.frame() %>%
rownames_to_column("primer")
tmp.oligos %>%
mutate(tmMean = as.numeric(tmMean)) %>%
ggplot() +
geom_segment(aes(x=start, xend=end, y=tmMean))+
ggtitle(paste(biggish_indels$CHROM[i], biggish_indels$POS[i]))
tmp.oligos = tmp.oligos %>% filter(tmMean>54, tmMean<60) %>%
select(start, end, length, iupacSequence, iupacSequenceRc, gcContentMean, tmMean)
primer.specificity = data.frame()
for(j in 1:nrow(tmp.oligos)){
# get oligo sequence
tmp.oligo = ""
if(tmp.oligos$start[j]<60){tmp.oligo=tmp.oligos$iupacSequence[j]}
if(tmp.oligos$start[j]>140){tmp.oligo=tmp.oligos$iupacSequenceRc[j]}
if(tmp.oligo==""){return("Something went wrong")}
# blast it against genome
write(tmp.oligo, file = "tmpfile.txt")
# blastn -task blastn -query query.fa -db subject
myPipe <- pipe( "/usr/local/ncbi/blast/bin/blastn -task blastn -query ~/tmpfile.txt -db ~/blast/db/c_elegans_db -outfmt 6 -max_target_seqs 10")
results <- read.table( myPipe )
colnames( results ) <- c( "QueryID",  "Chrom", "PercID",
"Len", "MM", "GO", "Qs", "Qe",
"Ss", "Se", "E", "Bits" )
results = results[c(1:2),c("Chrom", "PercID", "Len", "E", "MM", "GO", "Ss", "Se")]
results
primer.specificity[j,c("p.st", "p.end", "chrom.1", "percID.1", "Len.1", "E.1", "MM.1", "GO.1", "Ss.1", "Se.1", "chrom.2", "percID.2", "Len.2", "E.2", "MM.2", "GO.2", "Ss.2", "Se.2")] =
c(tmp.oligos$start[j], tmp.oligos$end[j], results[1,], results[2,])
}
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200) %>%
mutate(e.ratio = as.numeric(E.2)/as.numeric(E.1)) %>%
arrange(desc(e.ratio))
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200) %>%
mutate(e.ratio = as.numeric(E.2)/as.numeric(E.1)) %>%
arrange(desc(e.ratio)) %>% print(n=500)
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200) %>%
mutate(e.ratio = as.numeric(E.2)/as.numeric(E.1)) %>%
arrange(desc(e.ratio)) %>% print(500)
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200) %>%
mutate(e.ratio = as.numeric(E.2)/as.numeric(E.1)) %>%
arrange(desc(e.ratio)) %>% print()
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200, is.na(chrom.2)) %>%
arrange(desc(E.1))
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200, is.na(chrom.2)) %>%
arrange(E.1)
primer.specificity = data.frame()
for(j in 1:nrow(tmp.oligos)){
# get oligo sequence
tmp.oligo = ""
if(tmp.oligos$start[j]<60){tmp.oligo=tmp.oligos$iupacSequence[j]}
if(tmp.oligos$start[j]>140){tmp.oligo=tmp.oligos$iupacSequenceRc[j]}
if(tmp.oligo==""){return("Something went wrong")}
# blast it against genome
write(tmp.oligo, file = "tmpfile.txt")
# blastn -task blastn -query query.fa -db subject
myPipe <- pipe( "/usr/local/ncbi/blast/bin/blastn -task blastn -query ~/tmpfile.txt -db ~/blast/db/c_elegans_db -outfmt 6 -max_target_seqs 10")
results <- read.table( myPipe )
colnames( results ) <- c( "QueryID",  "Chrom", "PercID",
"Len", "MM", "GO", "Qs", "Qe",
"Ss", "Se", "E", "Bits" )
results = results[c(1:2),c("Chrom", "PercID", "Len", "E", "MM", "GO", "Ss", "Se")]
results
primer.specificity[j,c("p.st", "p.end", "tm" "chrom.1", "percID.1", "Len.1", "E.1", "MM.1", "GO.1", "Ss.1", "Se.1", "chrom.2", "percID.2", "Len.2", "E.2", "MM.2", "GO.2", "Ss.2", "Se.2")] =
for(j in 1:nrow(tmp.oligos)){
# get oligo sequence
tmp.oligo = ""
if(tmp.oligos$start[j]<60){tmp.oligo=tmp.oligos$iupacSequence[j]}
if(tmp.oligos$start[j]>140){tmp.oligo=tmp.oligos$iupacSequenceRc[j]}
if(tmp.oligo==""){return("Something went wrong")}
# blast it against genome
write(tmp.oligo, file = "tmpfile.txt")
# blastn -task blastn -query query.fa -db subject
myPipe <- pipe( "/usr/local/ncbi/blast/bin/blastn -task blastn -query ~/tmpfile.txt -db ~/blast/db/c_elegans_db -outfmt 6 -max_target_seqs 10")
results <- read.table( myPipe )
colnames( results ) <- c( "QueryID",  "Chrom", "PercID",
"Len", "MM", "GO", "Qs", "Qe",
"Ss", "Se", "E", "Bits" )
results = results[c(1:2),c("Chrom", "PercID", "Len", "E", "MM", "GO", "Ss", "Se")]
results
primer.specificity[j,c("p.st", "p.end", "tm", "chrom.1", "percID.1", "Len.1", "E.1", "MM.1", "GO.1", "Ss.1", "Se.1", "chrom.2", "percID.2", "Len.2", "E.2", "MM.2", "GO.2", "Ss.2", "Se.2")] =
c(tmp.oligos$start[j], tmp.oligos$end[j], tmp.oligos$tmMean[j], results[1,], results[2,])
}
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200, is.na(chrom.2)) %>%
arrange(E.1)
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200, !is.na(chrom.2)) %>%
mutate(e.ratio = as.numeric(E.2)/as.numeric(E.1)) %>%
arrange(desc(e.ratio))
head(tmp.oligos)
primer.specificity = data.frame()
for(j in 1:nrow(tmp.oligos)){
# get oligo sequence
tmp.oligo = ""
if(tmp.oligos$start[j]<60){tmp.oligo=tmp.oligos$iupacSequence[j]}
if(tmp.oligos$start[j]>140){tmp.oligo=tmp.oligos$iupacSequenceRc[j]}
if(tmp.oligo==""){return("Something went wrong")}
# blast it against genome
write(tmp.oligo, file = "tmpfile.txt")
# blastn -task blastn -query query.fa -db subject
myPipe <- pipe( "/usr/local/ncbi/blast/bin/blastn -task blastn -query ~/tmpfile.txt -db ~/blast/db/c_elegans_db -outfmt 6 -max_target_seqs 10")
results <- read.table( myPipe )
colnames( results ) <- c( "QueryID",  "Chrom", "PercID",
"Len", "MM", "GO", "Qs", "Qe",
"Ss", "Se", "E", "Bits" )
results = results[c(1:2),c("Chrom", "PercID", "Len", "E", "MM", "GO", "Ss", "Se")]
results
primer.specificity[j,c("p.num", "p.st", "p.end", "tm", "chrom.1", "percID.1", "Len.1", "E.1", "MM.1", "GO.1", "Ss.1", "Se.1", "chrom.2", "percID.2", "Len.2", "E.2", "MM.2", "GO.2", "Ss.2", "Se.2")] =
c(j, tmp.oligos$start[j], tmp.oligos$end[j], tmp.oligos$tmMean[j], results[1,], results[2,])
}
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200, !is.na(chrom.2)) %>%
mutate(e.ratio = as.numeric(E.2)/as.numeric(E.1)) %>%
arrange(desc(e.ratio))
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200, is.na(chrom.2)) %>%
arrange(E.1)
tmp.oligos[c(3,22),]
i=716 # 41, 465, 534, 716
#i=i+1
tmp.prof = consensusProfile(x = DNAMultipleAlignment(indels$N100s[i]))
tmp.oligos = designOligos(x = tmp.prof, probe = FALSE) %>% as.data.frame() %>%
rownames_to_column("primer")
tmp.oligos %>%
mutate(tmMean = as.numeric(tmMean)) %>%
ggplot() +
geom_segment(aes(x=start, xend=end, y=tmMean))+
ggtitle(paste(biggish_indels$CHROM[i], biggish_indels$POS[i]))
tmp.oligos = tmp.oligos %>% filter(tmMean>54, tmMean<60) %>%
select(start, end, length, iupacSequence, iupacSequenceRc, gcContentMean, tmMean)
primer.specificity = data.frame()
for(j in 1:nrow(tmp.oligos)){
# get oligo sequence
tmp.oligo = ""
if(tmp.oligos$start[j]<60){tmp.oligo=tmp.oligos$iupacSequence[j]}
if(tmp.oligos$start[j]>140){tmp.oligo=tmp.oligos$iupacSequenceRc[j]}
if(tmp.oligo==""){return("Something went wrong")}
# blast it against genome
write(tmp.oligo, file = "tmpfile.txt")
# blastn -task blastn -query query.fa -db subject
myPipe <- pipe( "/usr/local/ncbi/blast/bin/blastn -task blastn -query ~/tmpfile.txt -db ~/blast/db/c_elegans_db -outfmt 6 -max_target_seqs 10")
results <- read.table( myPipe )
colnames( results ) <- c( "QueryID",  "Chrom", "PercID",
"Len", "MM", "GO", "Qs", "Qe",
"Ss", "Se", "E", "Bits" )
results = results[c(1:2),c("Chrom", "PercID", "Len", "E", "MM", "GO", "Ss", "Se")]
results
primer.specificity[j,c("p.num", "p.st", "p.end", "tm", "chrom.1", "percID.1", "Len.1", "E.1", "MM.1", "GO.1", "Ss.1", "Se.1", "chrom.2", "percID.2", "Len.2", "E.2", "MM.2", "GO.2", "Ss.2", "Se.2")] =
c(j, tmp.oligos$start[j], tmp.oligos$end[j], tmp.oligos$tmMean[j], results[1,], results[2,])
}
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200, !is.na(chrom.2)) %>%
mutate(e.ratio = as.numeric(E.2)/as.numeric(E.1)) %>%
arrange(desc(e.ratio))
primer.specificity %>%
filter(chrom.1 == indels$CHROM[i], (as.numeric(Ss.1)-indels$POS[i])<200, is.na(chrom.2)) %>%
arrange(E.1)
# for V 1504269
tmp.oligos[c(32,81),]
indels$N100s[534]
nchar("agcaaaagtgcaaaagtggggcgcgctaatggttattttttgaatgtaataAcagcccgtttcagaggccccagatgcccaagccctatgatg")
save.image("~/Dropbox/postdoc/062_BSA/37_qPCR_of_selection/02_image.RData")
install_github("Tintori/popscan")
# OR, using github install
library(devtools)
install_github("Tintori/popscan")
remove.packages("popscan")
install_github("Tintori/popscan")
raw.meta = read.csv("~/Dropbox/postdoc/072_scanner_method_PAPER/03_example_meta.csv", sep = ",")
head(raw.meta)
library(popscan)
remove.packages("popscan")
library(devtools)
install_github("Tintori/popscan")
install.packages("devtools")
library(popscan)
raw.meta = read.csv("~/Dropbox/postdoc/072_scanner_method_PAPER/03_example_meta.csv", sep = ",")
head(raw.meta)
?cleanMeta
meta = cleanMeta(in.table = raw.meta,
scandir = "~/Dropbox/postdoc/072_scanner_method_PAPER/02_scan_data/",
scan.prefix = "scan", scan.position = "position",
group.factors = c("strain", "dose", "rep"),
facet.wrap.factor = "strain",
color.factor = "dose", linetype.factor = "rep",
filters = c("clean", "complete"),
trimbefore = "trim_before", trimafter = "trim_after")
head(meta)
?drawCrops
meta.with.crop.coord = drawCrops(exp.design = meta,
path.to.ij.jar = "/Applications/ImageJ.app/Contents/Java/ij.jar")
# install.packages("devtools")
uninstall("popscan")
remove.packages("popscan")
install_github("Tintori/popscan")
library(popscan)
meta.with.crop.coord = drawCrops(exp.design = meta,
path.to.ij.jar = "/Applications/ImageJ.app/Contents/Java/ij.jar")
drawCrops
source("~/Dropbox/postdoc/072_scanner_method_PAPER/04_scripts/popscan/R/drawCropsPatch.R")
meta.with.crop.coord = drawCrops(exp.design = meta,
path.to.ij.jar = "/Applications/ImageJ.app/Contents/Java/ij.jar")
source("~/Dropbox/postdoc/072_scanner_method_PAPER/04_scripts/popscan/R/drawCropsPatch.R")
meta.with.crop.coord = drawCrops(exp.design = meta,
path.to.ij.jar = "/Applications/ImageJ.app/Contents/Java/ij.jar")
?drawCrops
install_github("Tintori/popscan")
# install.packages("devtools")
uninstall("popscan")
remove.packages("popscan")
install_github("Tintori/popscan")
# cheat in meta.with.crop.coord
meta.with.crop.coord = read.csv("~/Dropbox/postdoc/072_scanner_method_PAPER/04_scripts/tmp_meta_with_crop_coords.csv", sep = ",")
head(meta.with.crop.coord)
?cropRawImages
# CROP RAW IMAGES
cropRawImages(exp.design = meta.with.crop.coord)
# CALCULATE SD
summary.sd <- growthCurves(exp.design = meta.with.crop.coord, remove.minimum = T)
head(meta.with.crop.coord)
# CALCULATE SD
summary.sd <- growthCurves(exp.design = meta.with.crop.coord, remove.minimum = T)
growthCurves
# CALCULATE SD
source("~/Dropbox/postdoc/072_scanner_method_PAPER/04_scripts/popscan/R/growthCurvesPatch.R")
summary.sd <- growthCurves(exp.design = meta.with.crop.coord, remove.minimum = T)
summary.sd <- growthCurves(exp.design = meta.with.crop.coord, remove.minimum = T)
# cheat summary.sd
summary.sd <- read.csv("~/Dropbox/postdoc/072_scanner_method_PAPER/04_scripts/tmp_standard_deviations_wobg.csv", sep = ",")
head(summary.sd)
dim(summary.sd)
# FIND MAX AND PRE_MAX MINIMUM
meta.with.minmax = timeToStarve(sd.table = summary.sd, exp.design = meta.with.crop.coord, inspect.each = T)
?timeToStarve
timeToStarve
# PLOT EVERYTHING
# cheat in meta.with.minmax
meta.with.minmax = read.csv("~/Dropbox/postdoc/072_scanner_method_PAPER/04_scripts/tmp_meta_with_time_to_starve.csv", sep = ",")
head(meta.with.minmax)
head(meta)
plotTraces(sd.table = summary.sd, exp.design = meta.with.minmax)
plotTraces
plotRatios(sd.table = summary.sd, exp.design = meta.with.minmax)
head(meta.with.minmax)
plotRatios
remove.packages("popscan")
library(devtools)
install_github("tintori/popscan")
remove.packages("popscan")
?tm
path.for.ij.script = find.package("popscan")
path.for.ij.script
path.for.ij.script = paste0(path.for.ij.script, "/tabulate_pix_int.txt")
path.for.ij.script
sink(path.for.ij.script)
cat('
print("Herewego");
// Parse settings out of input
in_folder = getArgument;
// Clear lagging "/" from folder name
if(substring(in_folder, in_folder.length-1, in_folder.length)=="/"){
in_folder = substring(in_folder, 0, in_folder.length-1);
}
out_folder = in_folder+"_hists";
File.makeDirectory(out_folder);
print("Making histogram of all images from "+in_folder);
print("Putting them in "+out_folder);
// Open images and histogram them
files_in =getFileList(in_folder);
for(i=0; i<(files_in.length); i++){
sample = files_in[i];
print(sample);
out_file = out_folder+"/"+sample+".txt";
print(out_file);
open(in_folder+"/"+sample);
nBins = 256;
run("Clear Results");
row = 0;
getHistogram(values, counts, nBins);
for (j=0; j<nBins; j++) {
setResult("Value", row, values[j]);
setResult("Count", row, counts[j]);
row++;
}
updateResults();
saveAs("Results", out_file);
close();
}
print("Done :)");
run("Quit");
'
sink()
sink(path.for.ij.script)
cat('
print("Herewego");
// Parse settings out of input
in_folder = getArgument;
// Clear lagging "/" from folder name
if(substring(in_folder, in_folder.length-1, in_folder.length)=="/"){
in_folder = substring(in_folder, 0, in_folder.length-1);
}
out_folder = in_folder+"_hists";
File.makeDirectory(out_folder);
print("Making histogram of all images from "+in_folder);
print("Putting them in "+out_folder);
// Open images and histogram them
files_in =getFileList(in_folder);
for(i=0; i<(files_in.length); i++){
sample = files_in[i];
print(sample);
out_file = out_folder+"/"+sample+".txt";
print(out_file);
open(in_folder+"/"+sample);
nBins = 256;
run("Clear Results");
row = 0;
getHistogram(values, counts, nBins);
for (j=0; j<nBins; j++) {
setResult("Value", row, values[j]);
setResult("Count", row, counts[j]);
row++;
}
updateResults();
saveAs("Results", out_file);
close();
}
print("Done :)");
run("Quit");
')
sink()
remove.packages("popscan")
library(devtools)
install_github("tintori/popscan")
library(popscan)
library(popscan)
?popscan
remove.packages("popscan")
.rs.restartR()
library(devtools)
install_github("tintori/popscan", force = TRUE)
library(popscan)
remove.packages("popscan")
.rs.restartR()
library(devtools)
install_github("tintori/popscan", force = TRUE)
library(popscan)
library(popscan)
remove.packages("popscan")
.rs.restartR()
library(devtools)
install_github("tintori/popscan@v0.0.0.9001", force = TRUE)
install_github("tintori/popscan", force = TRUE)
library(popscan)
?install_github
remove.packages("popscan")
.rs.restartR()
library(devtools)
install_github("tintori/popscan", force = TRUE, ref = "main")
library(popscan)
library(popscan)
remove.packages("popscan")
library(popscan)
remove.packages("popscan")
.rs.restartR()
# To update the local github package
library(roxygen2)
document()
getwd()
# To update the local github package
setwd("~/Dropbox/postdoc/072_scanner_method_PAPER/04_scripts/popscan/")
library(roxygen2)
document()
remove.packages("popscan")
library(devtools)
install_github("tintori/popscan", force = TRUE, ref = "main")
library(popscan)
write_ij_script()
write_ij_script(which.script = "all")
?write_ij_script
find.package("popscan")
?find.package
.libPaths()
remove.packages("popscan")
.rs.restartR()
library(devtools)
install_github("tintori/popscan@main", force = TRUE)
library(popscan)
find.package("popscan")
write_ij_script(which.script = "all")
# In case it was previously downloaded and installed, uninstall popscan package
uninstall("popscan")
# Install and load popscan
library(devtools)
install_github("tintori/popscan@main", force = TRUE)
library(popscan)
?write_ij_script
getwd()
library(roxygen2)
document()
remove.packages("popscan")
.rs.restartR()
library(devtools)
install_github("tintori/popscan@main", force = TRUE)
library(popscan)
remove.packages("popscan")
.rs.restartR()
# To update the local github package
setwd("~/Dropbox/postdoc/072_scanner_method_PAPER/04_scripts/popscan/")
library(roxygen2)
document()
library(devtools)
install_github("tintori/popscan@main", force = TRUE)
library(popscan)
path.to.my.example = "~/Dropbox/postdoc/072_scanner_method_PAPER/example_input/"
list.files(path.to.my.example)
list.files(path.to.my.example, pattern = "example_meta.csv")
path.to.my.example = "~/Dropbox/postdoc/072_scanner_method_PAPER/example_input/"
raw.meta = read.csv(paste0(path.to.my.example, "01_example_meta.csv"), sep=",")
